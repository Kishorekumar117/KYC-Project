openapi: 3.0.2
info:
  version: 1.0.0
  title: Test Service
  description: Test Service API Specification.
servers:
- url: /api/v1
tags:

- name: KYC
  description: API for User register & login

paths:
  
  /userInformation/user:
    post:
      tags: 
      - KYC
      summary: register user
      operationId: RegisterUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        '200':
          description: "Data inserted Succesfully"
          content:
            application/json:
              schema:
                type: string

        '500':
          description: There is Unexpected 500 error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserInfo500ResponseModel'
    get:
      tags:
      - KYC
      summary: Sign in user for registered user
      operationId: SignIn
      parameters: 
      - name: email
        in: query
        required: true
        schema:
          type: string
      - name: password
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUser'
          
        '500':
          description: There is Unexpected 500 error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserInfo500ResponseModel'
        
        '401':
          $ref: '#/components/responses/Unauthorized' 
          
        '404':
          $ref: '#/components/responses/NotFound'
          
  /userInformation/uploadKYC:
    post:
      tags: 
      - KYC
      summary:  upload kyc document
      operationId: UploadFile
      requestBody:
       content: 
         multipart/form-data: 
          schema:
            type: object
            properties:
              user_id:
                type: integer
              current_address:
                type: string
              document_type:
                type: string
                enum: 
                  - passport
                  - aadhaar card
                  - driving License
                  - voter id
                x-schema-form:
                  type: select
              file:
                type: string
                format: binary
                description: 'the file to upload'
            required: 
              - user_id
              - current_address
              - document_type
              - file
      responses:
        '200':
          description: "Kyc document uploaded Succesfully"
          content:
            application/json:
              schema:
                type: string
        '401':
          description: "Unauthorized"
          
        '500':
          $ref: '#/components/responses/500ApiError'

  /userInformation/getAllUser:
    get:
      tags:
      - KYC
      summary: get all user data
      operationId: getAll
      responses:
        200:
          description: Successfully Fetched User Data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAll'
                
        '401':
          description: "Unauthorized"
        
        500:
          $ref: '#/components/responses/500ApiError'
  
  /userInformation/getAllUploads:
    get:
      tags:
        - KYC
      summary: get all uploaded file information
      operationId: getAllUploads
      responses:
        '200':
          description: Successfully Fetched Uploads Data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllUploads'
        '401':
          description: "Unauthorized"
        '500':
          $ref: '#/components/responses/500ApiError'              


components:
  parameters:
    dummyParam:
      in: query
      name: dummy
      description: Dummy Param to return
      required: true
      schema:
        type: integer
        default: 0
        example: 1
  responses:
    500ApiError:
      description: There is Unexpected 500 error.
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: string
                example: 500
              message:
                type: string
                example: This is a 500 error
                
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
   
    UserData:
      type: object
      properties:
        user_name: 
          type: string
        email: 
          type: string
        password:
          type: string
    GetUser:
      type: object
      properties:
        user_id:
          type: integer
        user_Name:
          type: string
        email:
          type: string
        password:
          type: string
    GetAll:
      type: array
      items:
        type: object
        properties:
          user_id:
            type: integer
          user_name:
            type: string
          email:
            type: string
          password:
            type: string
    GetAllUploads:
      type: array
      items:
        type: object
        properties:
          kyc_id:
            type: integer
          user_id:
            type: integer
          user_name:
            type: string
          email:
            type: string
          extension:
            type: string
          current_address:
            type: string
          document_type:
            type: string
          file_path:
            type: string
            
    GetUserInfo500ResponseModel:
      type: object
      properties:
        statusCode:
          type: string
          example: '500'
        message:
          type: string
          example: This is a 500 error
    
    Error:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password